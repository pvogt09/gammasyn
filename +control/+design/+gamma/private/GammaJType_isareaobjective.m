function [isarea] = GammaJType_isareaobjective(this)
	%GAMMAJTYPE_ISAREAOBJECTIVE return if a GammaJType is an objective type that can be used for areafunction values
	%	Input:
	%		this:	instance (must be static to work with code generation)
	%	Output:
	%		isarea:	true, if the supplied type can b used for areafuntion values
	%	TODO:		does not work as static method in GammaJType
	if isscalar(this)
		isarea = this == GammaJType.ZERO ||...
			this == GammaJType.LINEAR ||...
			this == GammaJType.SQUARE ||...
			this == GammaJType.CUBIC ||...
			this == GammaJType.EXP ||...
			this == GammaJType.LOG ||...
			this == GammaJType.MAX ||...
			this == GammaJType.KREISSELMEIER ||...
			this == GammaJType.SQUAREPENALTY;
	else
		sz = size(this);
		t = reshape(this, [], 1);
		gain = false(size(t, 1), 1);
		for ii = 1:size(t, 1)
			gain(ii, 1) = t(ii) == GammaJType.ZERO ||...
				t(ii) == GammaJType.LINEAR ||...
				t(ii) == GammaJType.SQUARE ||...
				t(ii) == GammaJType.CUBIC ||...
				t(ii) == GammaJType.EXP ||...
				t(ii) == GammaJType.LOG ||...
				t(ii) == GammaJType.MAX ||...
				t(ii) == GammaJType.KREISSELMEIER ||...
				t(ii) == GammaJType.SQUAREPENALTY;
		end
		isarea = reshape(gain, sz);
	end
end